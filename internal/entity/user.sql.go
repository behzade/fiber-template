// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package entity

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
insert into localdb.user (name) values (?)
`

func (q *Queries) CreateUser(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, name)
}

const getUser = `-- name: GetUser :one
select id, name, created_at, updated_at from localdb.user where id = ?
`

func (q *Queries) GetUser(ctx context.Context, id uint64) (LocaldbUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i LocaldbUser
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, created_at, updated_at from localdb.user limit ? offset ?
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]LocaldbUser, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocaldbUser
	for rows.Next() {
		var i LocaldbUser
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
